--- ffmpeg-4.4.orig/libavcodec/libaribb24.c	2020-07-09 18:17:46.000000000 +0900
+++ ffmpeg-4.4/libavcodec/libaribb24.c	2021-04-24 13:12:05.038915623 +0900
@@ -107,7 +107,7 @@ static int libaribb24_generate_ass_heade
              "%d,%d,%d,0,"          /* Bold, Italic, Underline, StrikeOut */
              "100,100,"             /* Scale{X,Y} */
              "0,0,"                 /* Spacing, Angle */
-             "%d,1,0,"              /* BorderStyle, Outline, Shadow */
+             "%d,0,1,"              /* BorderStyle, Outline, Shadow */
              "%d,10,10,10,"         /* Alignment, Margin[LRV] */
              "0\r\n"                /* Encoding */
 
@@ -116,7 +116,7 @@ static int libaribb24_generate_ass_heade
              "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\r\n",
              !(avctx->flags & AV_CODEC_FLAG_BITEXACT) ? AV_STRINGIFY(LIBAVCODEC_VERSION) : "",
              plane_width, plane_height,
-             ASS_DEFAULT_FONT, font_size, ASS_DEFAULT_COLOR,
+             "ARIB Maru Gothic Regular", font_size, ASS_DEFAULT_COLOR,
              ASS_DEFAULT_COLOR, ASS_DEFAULT_BACK_COLOR, ASS_DEFAULT_BACK_COLOR,
              -ASS_DEFAULT_BOLD, -ASS_DEFAULT_ITALIC, -ASS_DEFAULT_UNDERLINE,
              ASS_DEFAULT_BORDERSTYLE, ASS_DEFAULT_ALIGNMENT);
@@ -208,12 +208,29 @@ static int libaribb24_handle_regions(AVC
 {
     Libaribb24Context *b24 = avctx->priv_data;
     const arib_buf_region_t *region = arib_decoder_get_regions(b24->decoder);
+    const arib_buf_region_t *region_search = region;
     unsigned int profile_font_size = get_profile_font_size(avctx->profile);
     AVBPrint buf = { 0 };
     int ret = 0;
+    int left_origin = INT_MAX, prev_bottom = INT_MIN;
+    int position_move;
 
     av_bprint_init(&buf, 0, AV_BPRINT_SIZE_UNLIMITED);
 
+    // Search the leftmost position
+    while (region_search) {
+        ptrdiff_t region_length = region_search->p_end - region->p_start;
+        unsigned int ruby_region =
+            region_search->i_fontheight == (profile_font_size / 2);
+
+        if (region_length == 0 || (ruby_region && b24->aribb24_skip_ruby)) {
+        }
+        else {
+            left_origin = FFMIN(left_origin, region_search->i_charleft);
+        }
+        region_search = region_search->p_next;
+    }
+
     while (region) {
         ptrdiff_t region_length = region->p_end - region->p_start;
         unsigned int ruby_region =
@@ -233,6 +250,31 @@ static int libaribb24_handle_regions(AVC
             goto next_region;
         }
 
+        // virtical positioning
+        if (prev_bottom == INT_MIN) {
+            av_bprintf(&buf, "{\\an7}{\\pos(%d,%d)}",
+                left_origin, region->i_charbottom - profile_font_size);
+        }
+        else if (prev_bottom != region->i_charbottom) {
+            position_move = region->i_charbottom - prev_bottom;
+            av_bprintf(&buf, " \\N");
+            position_move -= profile_font_size;
+            if (position_move > 0)
+                av_bprintf(&buf, "{\\fscy%"PRId64"} \\N{\\r}",
+                    av_rescale(position_move, 100, profile_font_size));
+        }
+
+        // horizontal positioning
+        if (prev_bottom != region->i_charbottom) {
+            position_move = region->i_charleft - left_origin;
+            if (position_move > 0) {
+                const char ideographic_space[] = {0xe3,0x80,0x80,0x00};
+                av_bprintf(&buf, "{\\fscx%"PRId64"}%s{\\r}",
+                        av_rescale(position_move, 100, profile_font_size),
+                        ideographic_space);
+            }
+        }
+
         // color and alpha
         if (foreground_bgr_color != ASS_DEFAULT_COLOR)
             av_bprintf(&buf, "{\\1c&H%06x&}", foreground_bgr_color);
@@ -256,12 +298,13 @@ static int libaribb24_handle_regions(AVC
                                   profile_font_size));
         }
 
-        // TODO: positioning
 
         av_bprint_append_data(&buf, region->p_start, region_length);
 
         av_bprintf(&buf, "{\\r}");
 
+        prev_bottom = region->i_charbottom;
+
 next_region:
         region = region->p_next;
     }
@@ -314,6 +357,16 @@ static int libaribb24_decode(AVCodecCont
         return AVERROR(ENOMEM);
     }
 
+    // Must be initialized before calling the "arib_decode_buffer()" function
+    switch (avctx->profile) {
+    case FF_PROFILE_ARIB_PROFILE_A:
+        arib_initialize_decoder_a_profile((arib_decoder_t *)(b24->decoder));
+        break;
+    case FF_PROFILE_ARIB_PROFILE_C:
+        arib_initialize_decoder_c_profile((arib_decoder_t *)(b24->decoder));
+        break;
+    }
+
     decoded_subtitle_size = arib_decode_buffer(b24->decoder,
                                                parsed_data,
                                                parsed_data_size,
